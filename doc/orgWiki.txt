================================================================================
                                                                *orgWiki.nvim*
orgWiki.nvim is a plugin that ands wiki and diary extension to orgmode filetype
It is inspired by vimwiki plugin

orgwiki.setup({opts})                                            *orgwiki.setup*
    This function initializes orgWiki by setting keymaps and defining path variables.
    opts is a table that must include the following: wiki_path, diary_path.
    Other parameters are optional

    Parameters: ~
        {opts}  Table containing configuration options
		• wiki_path: A list of directories to be recognized as orgWiki
		• diary_path: A string containing the path to the direcotry where diary entries must be stored
		• index_filename* A string containing wiki index file name (default value: `"Index.org"`)
		• diary_index_filename: A string containing diary index file name (default value: `"Index.org"`)
		• keys: optional table with values to set up keybindings. When any of the keys are omitted, default mappings are used
		    • create_or_follow = `"<CR>"`, --  Follow hyperlink under cursor
		    • traverse_back = `"<BS>"`, -- Return to the parent file or top of the link stack
		    • goto_next = `"]w"`, --  Go to next hyperlink in the file
		    • goto_prev = `"[w"`, -- Go to prevvious hyperlink in the file
		    • hover = `"K"`, -- Preview the linked file in a popup window
		    • open_index = `"<leader>ww"`, --  Open the default orgWiki index file
		    • open_index_tab = `"<leader>wt"`, -- Open the default wiki in a new tab
		    • open_choice_index = `"<leader>wc"`, --  Open a wiki from list
		    • open_next_index = `"<leader>wn"`, -- Switch to the next wiki if available
		    • open_diary_index = `"<leader>wi"`, -- Open the diary index file
		    • diary_update = `"<leader>w<leader>i"`, -- Update the diary index files with new available entries
		    • diary_today = `"<leader>w<leader>w"`, -- Open a new diary entry ("Today")
		    • diary_tomorrow = `"<leader>w<leader>t"`, -- Open a new diary entry ("Tomorrow")
		    • diary_yesterday = `"<leader>w<leader>y"`, -- Open yesterday's diary entry

wiki.openIndex({editcmd})                                       *wiki.openIndex*
    Open the default wiki

    Parameters: ~
        {editcmd}  (string)  eg: "vs","e","tabnew"


wiki.followOrCreate()                                      *wiki.followOrCreate*
    If <cWORD> is not a hyperlink, create hyperlink interactively and jump to the link


wiki.deleteLink()                                              *wiki.deleteLink*
    Delete hyperlink under cursor


wiki.back()                                                          *wiki.back*
    Jump back one step in the hyperlink jump-stack


wiki.nextWiki({editcmd})                                         *wiki.nextWiki*
    Switch between Wikis if maintaining multiple wikis

    Parameters: ~
        {editcmd}  (string)  eg: "vs","e","tabnew"


wiki.select({editcmd})                                             *wiki.select*
    Choose a wiki to open from the list

    Parameters: ~
        {editcmd}  (string)  eg: "vs","e","tabnew"


wiki.gotoNext()                                                  *wiki.gotoNext*
     Find the the next link closest to the cursor
     Jump the cursot to the link


wiki.gotoPrev()                                                  *wiki.gotoPrev*
     Find the the previous link closest to the cursor
     Jump the cursot to the link


wiki.hover()                                                        *wiki.hover*
    Find link under cursor and extract path for previewing
    Open floating preview. If preview already exists, focus floating win


diary.diaryGenerateIndex()                            *diary.diaryGenerateIndex*
    This function scans the diary_path for all files and creates or updates an index file
    The index is categorized into months and years automatically


diary.diaryTodayOpen({editcmd})                           *diary.diaryTodayOpen*
    Create or open current day's diary entry

    Parameters: ~
        {editcmd}  (string)  eg: "vs","e","tabnew"


diary.diaryYesterdayOpen({editcmd})                   *diary.diaryYesterdayOpen*
    Open yesterday's diary entry

    Parameters: ~
        {editcmd}  (string)  eg: "vs","e","tabnew"


diary.diaryTomorrowOpen({editcmd})                     *diary.diaryTomorrowOpen*
    Create or open tomorrow's diary entry

    Parameters: ~
        {editcmd}  (string)  eg: "vs","e","tabnew"


diary.diaryIndexOpen({editcmd})                           *diary.diaryIndexOpen*
    Open diary index file

    Parameters: ~
        {editcmd}  (string)  eg: "vs","e","tabnew"


Preview.show_preview({file})                              *Preview.show_preview*
    Open popup window with linked file preview. Also set autocommands to close
    popup window and change its size on scrolling and vim resizing.

    Parameters: ~
        {file}  (string)  path of file to preview


Preview.open_or_focus({path})                            *Preview.open_or_focus*
    Open floating preview, if preview already exists, focus floating win

    Parameters: ~
        {path}  (string)  path of file to preview


vim:tw=78:ts=8:noet:ft=help:norl:

